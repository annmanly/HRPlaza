/*

    Copyright (c) 2025 Pocketz World. All rights reserved.

    This is a generated file, do not edit!

    Generated by com.pz.studio
*/

#if UNITY_EDITOR

using System;
using System.Linq;
using UnityEngine;
using Highrise.Client;
using Highrise.Studio;
using Highrise.Lua;
using UnityEditor;

namespace Highrise.Lua.Generated
{
    [AddComponentMenu("Lua/DialogueCameraController")]
    [LuaRegisterType(0xe71dbc21b9718654, typeof(LuaBehaviour))]
    public class DialogueCameraController : LuaBehaviourThunk
    {
        private const string s_scriptGUID = "49cb00da31d223d429d8add9b96c16aa";
        public override string ScriptGUID => s_scriptGUID;

        [Tooltip("The default camera to switch to when dialogue ends")]
        [SerializeField] public UnityEngine.Camera _DefaultCamera = default;
        [Tooltip("Don't enable the default camera on start if you have other cameras")]
        [SerializeField] public System.Boolean _EnableDefaultCameraOnStart = true;
        [Tooltip("The duration of the camera transition in seconds")]
        [SerializeField] public System.Double _TransitionDuration = 1;
        [Tooltip("The distance from characters during dialogue (how far the camera is from the characters)")]
        [SerializeField] public System.Double _DialogueDistance = 5;
        [Tooltip("The height of the camera during dialogue (how much the camera is above the characters)")]
        [SerializeField] public System.Double _DialogueHeight = 2;
        [Tooltip("The offset for the look-at point (how much the camera is above the characters)")]
        [SerializeField] public System.Double _LookAtOffset = 1.5;
        [Tooltip("Whether to avoid obstacles")]
        [SerializeField] public System.Boolean _EnableCollisionAvoidance = true;
        [Tooltip("The offset for collision avoidance")]
        [SerializeField] public System.Double _CollisionOffset = 0.2;
        [Tooltip("The minimum distance to obstacles")]
        [SerializeField] public System.Double _ObstacleDistanceMin = 0.5;
        [Tooltip("The maximum distance to obstacles")]
        [SerializeField] public System.Double _ObstacleDistanceMax = 2;
        [Tooltip("The maximum distance to obstacles")]
        [SerializeField] public System.Double _RayDistanceMax = 10;
        [Tooltip("The minimum distance to obstacles")]
        [SerializeField] public System.Double _RayDistanceMin = 0.1;
        [Tooltip("The speed at which camera stabilizes after transition")]
        [SerializeField] public System.Double _StabilizationSpeed = 5;
        [Tooltip("Whether to automatically rotate avatars to face each other during dialogue")]
        [SerializeField] public System.Boolean _RotateAvatars = true;
        [Tooltip("How quickly avatars rotate to face each other")]
        [SerializeField] public System.Double _AvatarRotationSpeed = 8;

        protected override SerializedPropertyValue[] SerializeProperties()
        {
            if (_script == null)
                return Array.Empty<SerializedPropertyValue>();

            return new SerializedPropertyValue[]
            {
                CreateSerializedProperty(_script.GetPropertyAt(0), _DefaultCamera),
                CreateSerializedProperty(_script.GetPropertyAt(1), _EnableDefaultCameraOnStart),
                CreateSerializedProperty(_script.GetPropertyAt(2), _TransitionDuration),
                CreateSerializedProperty(_script.GetPropertyAt(3), _DialogueDistance),
                CreateSerializedProperty(_script.GetPropertyAt(4), _DialogueHeight),
                CreateSerializedProperty(_script.GetPropertyAt(5), _LookAtOffset),
                CreateSerializedProperty(_script.GetPropertyAt(6), _EnableCollisionAvoidance),
                CreateSerializedProperty(_script.GetPropertyAt(7), _CollisionOffset),
                CreateSerializedProperty(_script.GetPropertyAt(8), _ObstacleDistanceMin),
                CreateSerializedProperty(_script.GetPropertyAt(9), _ObstacleDistanceMax),
                CreateSerializedProperty(_script.GetPropertyAt(10), _RayDistanceMax),
                CreateSerializedProperty(_script.GetPropertyAt(11), _RayDistanceMin),
                CreateSerializedProperty(_script.GetPropertyAt(12), _StabilizationSpeed),
                CreateSerializedProperty(_script.GetPropertyAt(13), _RotateAvatars),
                CreateSerializedProperty(_script.GetPropertyAt(14), _AvatarRotationSpeed),
            };
        }
        
#if HR_STUDIO
        [MenuItem("CONTEXT/DialogueCameraController/Edit Script")]
        private static void EditScript()
        {
            VisualStudioCodeOpener.OpenPath(AssetDatabase.GUIDToAssetPath(s_scriptGUID));
        }
#endif
    }
}

#endif
